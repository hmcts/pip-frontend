#!groovy

properties([
    pipelineTriggers([cron('H 07 * * 1-5')]),
    parameters([
        string(name: 'DATA_MANAGEMENT_URL', defaultValue: 'https://pip-data-management.staging.platform.hmcts.net',
            description: 'The data managementURL you want to run the full functional tests against'),
        string(name: 'ACCOUNT_MANAGEMENT_URL', defaultValue: 'https://pip-account-management.staging.platform.hmcts.net',
            description: 'The account management URL you want to run the full functional tests against'),
        string(name: 'PUBLICATION_SERVICES_URL', defaultValue: 'https://pip-publication-services.staging.platform.hmcts.net',
            description: 'The publication services URL you want to run the full functional tests against'),
        string(name: 'TEST_URL', defaultValue: 'https://pip-frontend.staging.platform.hmcts.net',
            description: 'The front-end URL you want to run the full functional tests against'),
    ])
])

@Library("Infrastructure")

def type = "nodejs"
def product = "pip"
def component = "frontend"

def setupTestSecrets() {

    def bootstrap_env = env.ENV == "prod" || env.ENV == "demo" || env.ENV == "test" || env.ENV == "sbox" ? env.ENV : "stg"

    azureKeyVault(
        keyVaultURL: "https://pip-bootstrap-${bootstrap_env}-kv.vault.azure.net/",
        secrets: [
            secret('b2c-test-account', 'B2C_USERNAME'),
            secret('b2c-test-account-pwd', 'B2C_PASSWORD'),
            secret('b2c-test-admin-account', 'B2C_ADMIN_USERNAME'),
            secret('b2c-test-admin-account-pwd', 'B2C_ADMIN_PASSWORD'),
            secret('cft-valid-test-account', 'CFT_VALID_USERNAME'),
            secret('cft-valid-test-account-password', 'CFT_VALID_PASSWORD'),
            secret('cft-invalid-test-account', 'CFT_INVALID_USERNAME'),
            secret('cft-invalid-test-account-password', 'CFT_INVALID_PASSWORD'),
            secret('b2c-test-system-admin-account', 'B2C_SYSTEM_ADMIN_USERNAME'),
            secret('b2c-test-system-admin-account-pwd', 'B2C_SYSTEM_ADMIN_PASSWORD'),
            secret('app-pip-data-management-scope', 'DATA_MANAGEMENT_AZ_API'),
            secret('app-pip-account-management-scope', 'ACCOUNT_MANAGEMENT_AZ_API'),
            secret('b2c-test-system-admin-account-provenance-id', 'SYSTEM_ADMIN_PROVENANCE_ID'),
            secret('b2c-test-account-id', 'VERIFIED_USER_ID'),
            secret('test-system-admin-id', 'SYSTEM_ADMIN_USER_ID'),
            secret('app-tenant', 'TENANT_ID'),
            secret('app-pip-frontend-id', 'CLIENT_ID_INTERNAL'),
            secret('app-pip-frontend-pwd', 'CLIENT_SECRET_INTERNAL'),
            secret('auto-generated-test-user-pwd','TEST_USER_PASSWORD'),
            secret('crime-valid-test-account', 'CRIME_VALID_USERNAME'),
            secret('crime-valid-test-account-password', 'CRIME_VALID_PASSWORD'),
            secret('sso-test-admin-account-ctsc-user', 'SSO_TEST_ADMIN_CTSC_USER'),
            secret('sso-test-admin-account-ctsc-pwd', 'SSO_TEST_ADMIN_CTSC_PWD'),
            secret('sso-test-admin-local-account-user', 'SSO_TEST_ADMIN_LOCAL_USER'),
            secret('sso-test-admin-local-account-pwd','SSO_TEST_ADMIN_LOCAL_PWD'),
            secret('sso-test-system-admin-account-user','SSO_TEST_SYSTEM_ADMIN_USER'),
            secret('sso-test-system-admin-account-pwd', 'SSO_TEST_SYSTEM_ADMIN_PWD'),
            secret('sso-test-system-admin-user-id', 'SSO_SYSTEM_ADMIN_USER_ID'),
            secret('sso-test-no-roles-account-user','SSO_TEST_NO_ROLES_USER'),
            secret('sso-test-no-roles-account-pwd', 'SSO_TEST_NO_ROLES_PWD'),
        ]) {
        env.B2C_USERNAME = "${B2C_USERNAME}"
        env.B2C_PASSWORD = "${B2C_PASSWORD}"
        env.B2C_ADMIN_USERNAME = "${B2C_ADMIN_USERNAME}"
        env.B2C_ADMIN_PASSWORD = "${B2C_ADMIN_PASSWORD}"
        env.CFT_VALID_USERNAME = "${CFT_VALID_USERNAME}"
        env.CFT_VALID_PASSWORD = "${CFT_VALID_PASSWORD}"
        env.CFT_INVALID_USERNAME = "${CFT_INVALID_USERNAME}"
        env.CFT_INVALID_PASSWORD = "${CFT_INVALID_PASSWORD}"
        env.B2C_SYSTEM_ADMIN_USERNAME = "${B2C_SYSTEM_ADMIN_USERNAME}"
        env.B2C_SYSTEM_ADMIN_PASSWORD = "${B2C_SYSTEM_ADMIN_PASSWORD}"
        env.DATA_MANAGEMENT_AZ_API = "${DATA_MANAGEMENT_AZ_API}"
        env.ACCOUNT_MANAGEMENT_AZ_API = "${ACCOUNT_MANAGEMENT_AZ_API}"
        env.SYSTEM_ADMIN_PROVENANCE_ID = "${SYSTEM_ADMIN_PROVENANCE_ID}"
        env.VERIFIED_USER_ID = "${VERIFIED_USER_ID}"
        env.SYSTEM_ADMIN_USER_ID = "${SYSTEM_ADMIN_USER_ID}"
        env.TENANT_ID = "${TENANT_ID}"
        env.CLIENT_ID_INTERNAL = "${CLIENT_ID_INTERNAL}"
        env.CLIENT_SECRET_INTERNAL = "${CLIENT_SECRET_INTERNAL}"
        env.TEST_USER_PASSWORD = "${TEST_USER_PASSWORD}"
        env.CRIME_VALID_USERNAME = "${CRIME_VALID_USERNAME}"
        env.CRIME_VALID_PASSWORD = "${CRIME_VALID_PASSWORD}"
        env.SSO_TEST_ADMIN_CTSC_USER = "${SSO_TEST_ADMIN_CTSC_USER}"
        env.SSO_TEST_ADMIN_CTSC_PWD = "${SSO_TEST_ADMIN_CTSC_PWD}"
        env.SSO_TEST_ADMIN_LOCAL_USER = "${SSO_TEST_ADMIN_LOCAL_USER}"
        env.SSO_TEST_ADMIN_LOCAL_PWD = "${SSO_TEST_ADMIN_LOCAL_PWD}"
        env.SSO_TEST_SYSTEM_ADMIN_USER = "${SSO_TEST_SYSTEM_ADMIN_USER}"
        env.SSO_TEST_SYSTEM_ADMIN_PWD = "${SSO_TEST_SYSTEM_ADMIN_PWD}"
        env.SSO_SYSTEM_ADMIN_USER_ID = "${SSO_SYSTEM_ADMIN_USER_ID}"
        env.SSO_TEST_NO_ROLES_USER = "${SSO_TEST_NO_ROLES_USER}"
        env.SSO_TEST_NO_ROLES_PWD = "${SSO_TEST_NO_ROLES_PWD}"
    }
}

static Map<String, Object> secret(String secretName, String envVariable) {
    [
        $class     : 'AzureKeyVaultSecret',
        secretType : 'Secret',
        name       : secretName,
        envVariable: envVariable
    ]
}

withNightlyPipeline(type, product, component) {
    enableFortifyScan('pip-ss-kv-stg')
    setupTestSecrets()
    enableFullFunctionalTest()
    enableCrossBrowserTest()

    afterAlways('fullFunctionalTest') {
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "functional-output/functional/allure",
            reportFiles          : "index.html",
            reportName           : "Functional Test Report"
        ]

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "functional-output/accessibility",
            reportFiles          : "all_results.html",
            reportName           : "Accessibility Test Report"
        ]

        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/functional/reports/**/*'
    }

    afterAlways('crossBrowserTest') {
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "functional-output/cross-browser/allure",
            reportFiles          : "index.html",
            reportName           : "Cross Browser Test Report"
        ]

        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/cross-browser/reports/**/*'
    }

    afterSuccess('fortify-scan') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }
}

