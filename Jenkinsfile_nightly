#!groovy

properties([
// H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
pipelineTriggers([cron('H 08 * * 1-5')])
])

@Library("Infrastructure")

def type = "nodejs"
def product = "pip"
def component = "frontend"

def setupTestSecrets() {

    def bootstrap_env = env.ENV == "prod" || env.ENV == "demo" || env.ENV == "sbox" ? env.ENV : "stg"

    azureKeyVault(
        keyVaultURL: "https://pip-bootstrap-${bootstrap_env}-kv.vault.azure.net/",
        secrets: [
            secret('b2c-test-account', 'B2C_USERNAME'),
            secret('b2c-test-account-pwd', 'B2C_PASSWORD'),
            secret('b2c-test-admin-account', 'B2C_ADMIN_USERNAME'),
            secret('b2c-test-admin-account-pwd', 'B2C_ADMIN_PASSWORD'),
            secret('cft-valid-test-account', 'CFT_VALID_USERNAME'),
            secret('cft-valid-test-account-password', 'CFT_VALID_PASSWORD'),
            secret('cft-invalid-test-account', 'CFT_INVALID_USERNAME'),
            secret('cft-invalid-test-account-password', 'CFT_INVALID_PASSWORD'),
            secret('b2c-test-system-admin-account', 'B2C_SYSTEM_ADMIN_USERNAME'),
            secret('b2c-test-system-admin-account-pwd', 'B2C_SYSTEM_ADMIN_PASSWORD'),
            secret('app-pip-data-management-scope', 'DATA_MANAGEMENT_AZ_API'),
            secret('app-pip-subscription-management-scope', 'SUBSCRIPTION_MANAGEMENT_AZ_API'),
            secret('app-pip-account-management-scope', 'ACCOUNT_MANAGEMENT_AZ_API'),
            secret('b2c-test-system-admin-account-provenance-id', 'SYSTEM_ADMIN_PROVENANCE_ID'),
            secret('test-user-id', 'VERIFIED_USER_ID'),
            secret('test-system-admin-id', 'SYSTEM_ADMIN_USER_ID'),
            secret('app-tenant', 'TENANT_ID'),
            secret('app-pip-frontend-id', 'CLIENT_ID_INTERNAL'),
            secret('app-pip-frontend-pwd', 'CLIENT_SECRET_INTERNAL'),
            secret('auto-generated-test-user-pwd','TEST_USER_PASSWORD')
        ]) {
        env.B2C_USERNAME = "${B2C_USERNAME}"
        env.B2C_PASSWORD = "${B2C_PASSWORD}"
        env.B2C_ADMIN_USERNAME = "${B2C_ADMIN_USERNAME}"
        env.B2C_ADMIN_PASSWORD = "${B2C_ADMIN_PASSWORD}"
        env.CFT_VALID_USERNAME = "${CFT_VALID_USERNAME}"
        env.CFT_VALID_PASSWORD = "${CFT_VALID_PASSWORD}"
        env.CFT_INVALID_USERNAME = "${CFT_INVALID_USERNAME}"
        env.CFT_INVALID_PASSWORD = "${CFT_INVALID_PASSWORD}"
        env.B2C_SYSTEM_ADMIN_USERNAME = "${B2C_SYSTEM_ADMIN_USERNAME}"
        env.B2C_SYSTEM_ADMIN_PASSWORD = "${B2C_SYSTEM_ADMIN_PASSWORD}"
        env.DATA_MANAGEMENT_AZ_API = "${DATA_MANAGEMENT_AZ_API}"
        env.SUBSCRIPTION_MANAGEMENT_AZ_API = "${SUBSCRIPTION_MANAGEMENT_AZ_API}"
        env.ACCOUNT_MANAGEMENT_AZ_API = "${ACCOUNT_MANAGEMENT_AZ_API}"
        env.SYSTEM_ADMIN_PROVENANCE_ID = "${SYSTEM_ADMIN_PROVENANCE_ID}"
        env.VERIFIED_USER_ID = "${VERIFIED_USER_ID}"
        env.SYSTEM_ADMIN_USER_ID = "${SYSTEM_ADMIN_USER_ID}"
        env.TENANT_ID = "${TENANT_ID}"
        env.CLIENT_ID_INTERNAL = "${CLIENT_ID_INTERNAL}"
        env.CLIENT_SECRET_INTERNAL = "${CLIENT_SECRET_INTERNAL}"
        env.TEST_URL = "https://pip-frontend.staging.platform.hmcts.net"
        env.TEST_USER_PASSWORD = "${TEST_USER_PASSWORD}"
    }
}

static Map<String, Object> secret(String secretName, String envVariable) {
    [
        $class     : 'AzureKeyVaultSecret',
        secretType : 'Secret',
        name       : secretName,
        envVariable: envVariable
    ]
}

withNightlyPipeline(type, product, component) {
    setupTestSecrets()
    enableFullFunctionalTest()
    enableCrossBrowserTest()

    afterAlways('fullFunctionalTest') {
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "functional-output/functional/allure",
            reportFiles          : "index.html",
            reportName           : "Functional Test Report"
        ]

        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/functional/reports/**/*'
    }

    afterAlways('crossBrowserTest') {
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "functional-output/cross-browser/allure",
            reportFiles          : "index.html",
            reportName           : "Cross Browser Test Report"
        ]

        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/cross-browser/reports/**/*'
    }
}

