{% from "moj/components/filter/macro.njk" import mojFilter %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/checkboxes/macro.njk" import govukCheckboxes -%}
{% from "govuk/components/input/macro.njk" import govukInput %}

{% macro downloadButton(label = 'Download a copy', artefactId) %}
    {{ govukButton({
        attributes: {
            id: 'download-button'
        },
        text: label,
        href: 'list-download-disclaimer?artefactId=' + artefactId
    }) }}
{% endmacro %}

{% macro filterForm(url, filterOptions, showFilters, artefactId, filter) %}
    <div class="govuk-grid-column-one-third govuk-!-padding-left-0 govuk-!-padding-right-4 {% if not showFilters %} always-hide {% endif %}", id="filters">
    <div class="filter-form">
        {% set checkedFilters = [] %}
        {% set toBeCreated = true %}
        {% set filterOptionsHtml %}
            {{ govukInput({
                label: {
                    text: filter.searchFilters,
                    classes: 'govuk-label--m'
                },
                id: 'search-filters',
                name: 'search-filters'
            }) }}
            {% for key, options in filterOptions %}
                {% set checkedFilterItems = [] %}
                {% set items = [] %}
                {% for item in options %}
                    {% set _ = items.push({
                        value: item.value,
                        text: item.text,
                        checked: item.checked
                    }) %}
                    {% if item.checked %}
                        {% set _ = checkedFilterItems.push({href: '?clear=' + item.value, text: item.text}) %}
                    {% endif %}
                {% endfor %}

                {% set filterHeader = filter.postcode if key == 'postcodes' else filter.prosecutor %}
                {% if checkedFilterItems | length > 0 %}
                    {% set _ = checkedFilters.push({heading: {text: filterHeader}, items: checkedFilterItems}) %}
                {% endif %}

                {% if toBeCreated %}
                    <div class="moj-button-menu filters__innerButton" id="innerButton">
                        <div class="moj-button-menu__wrapper">
                            <a href="#" role="button" draggable="false"
                               class="govuk-button moj-button-menu__item govuk-button--secondary" data-module="govuk-button"
                               onclick="toggleFilters()">
                                {{ filter.hide }}
                            </a>
                        </div>
                    </div>
                    {% set toBeCreated = false %}
                {% endif %}
                <div class="govuk-form-group">
                    <fieldset class="govuk-fieldset">
                        <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                            <h1 class="govuk-fieldset__heading">
                                <a href="javascript:;" class="govuk-link govuk-!-font-size-19" onclick="hideFilterSection('{{ key }}')">{{ filterHeader }}
                                </a>
                                <span class="govuk-body govuk-!-font-size-19 filter-colour" id="{{ key }}-link">&#9660</span>
                            </h1>
                        </legend>
                        <div class="govuk-checkboxes govuk-checkboxes--small" id="{{ key }}-checkbox" data-module="govuk-checkboxes">
                            {% set checkboxCount = 0 %}
                            {% for item in items %}
                                {% set checkboxCount = checkboxCount + 1 %}
                                <div class="govuk-checkboxes__item">
                                    <input class="govuk-checkboxes__input" id="{{ key }}-{{ checkboxCount }}" name="{{ key }}" type="checkbox" value="{{ item.value }}" {% if item.checked %} checked {% endif %}>
                                    <label class="govuk-label govuk-checkboxes__label" for="{{ key }}-{{ checkboxCount }}">
                                        {{ item.text }}
                                    </label>
                                </div>
                            {% endfor %}
                        </div>
                    </fieldset>
                </div>
            {% endfor %}
        {% endset %}
        <form method="post" action="{{ url }}?artefactId={{ artefactId }}" class="moj-filter-layout__filter layout-width-four-fifths"
              autocomplete="off">
            {{ mojFilter({
                submit: {
                    text: filter.applyFilters
                },
                heading: {
                    text: filter.heading
                },
                selectedFilters: {
                    heading: {
                        text: filter.selectedFilters
                    },

                    clearLink: {
                        text: filter.clearFilters,
                        href: '?artefactId=' + artefactId + '&clear=all'
                    },

                    categories: checkedFilters
                },
                optionsHtml: filterOptionsHtml
            }) }}
        </form>
    </div>
</div>
{% endmacro %}

{% macro filterManipulation(url, artefactId, filter) %}
    <script>
        var searchFilters = document.getElementById('search-filters');
        searchFilters.addEventListener('keyup', searchFilterItems);

        // This function is used to dynamically show/hide individual filter checkbox items based on the search box value
        function searchFilterItems() {
            const filters = Array.from(document.getElementsByClassName('govuk-checkboxes__item'));
            localStorage.setItem('searchFiltersValue', searchFilters.value);
            var postcodeMatches = 0;

            filters.forEach(function(filter, index) {
                let checkboxId = filter.firstElementChild.id;
                if (isPostcodeFilter(filter)) {
                    if (searchFilters.value.length > 0) {
                        postalArea = extractPostalArea(filter);
                        if ((districtMatch(postalArea, searchFilters, filter)) || (areaMatch(postalArea, searchFilters))) {
                            showFilterOption(filter);
                            selectCheckbox(checkboxId);
                            postcodeMatches = postcodeMatches+1;
                        } else if (postcodeMatches === 0 && londonAreaMatch(postalArea, searchFilters)) {
                            showFilterOption(filter);
                            selectCheckbox(checkboxId);
                        } else {
                            hideFilterOption(filter);
                            deselectCheckbox(checkboxId);
                        }
                   } else {
                        showFilterOption(filter);
                        deselectCheckbox(checkboxId);
                   }
                } else if (filterIncludesSearchTerm(filter, searchFilters)) {
                    showFilterOption(filter);
                } else {
                    hideFilterOption(filter);
                }
            })
        }

        function extractPostalArea(filter) {
            return filter.innerText.split(/\d/)[0].trim().toLowerCase();
        }

        function isPostcodeFilter(filter) {
            return filter.innerHTML.includes('postcodes')
        }

        function areaMatch(postalArea, searchFilters) {
            return (postalArea === searchFilters.value.toLowerCase());
        }

        function districtMatch(postalArea, searchFilters, filter) {
            return searchFilters.value.length > postalArea.length && filterIncludesSearchTerm(filter, searchFilters);
        }

        function londonAreaMatch(postalArea, searchFilters) {
            return (postalArea === 'london postcodes' && postalArea.includes(searchFilters.value.toLowerCase()));
        }

        function filterIncludesSearchTerm(filter, searchFilter) {
            return filter.innerText.toLowerCase().includes(searchFilters.value.toLowerCase());
        }

        function showFilterOption(filter) {
            filter.style.removeProperty('display');
        }

        function hideFilterOption(filter) {
            filter.style.display = 'none';
        }

        function selectCheckbox(checkboxId) {
            document.getElementById(checkboxId).checked = true;
        }

        function deselectCheckbox(checkboxId) {
            document.getElementById(checkboxId).checked = false;
        }

        function hideFilterSection(key) {
            const section = document.getElementById(key + '-checkbox');
            const link = document.getElementById(key + '-link');
            section.classList.toggle("always-hide");
            link.innerHTML = section.classList.contains('always-hide') ? '&#9654;' : '&#9660;'
        }

        // The following function is hiding content and navigation due to screen readers to read behind the visible panel
        function toggleFilters() {
            const element = document.getElementById("filters");

            if (element.classList.toggle("always-hide")) {
                document.getElementsByClassName('hide-show-button')[0].innerHTML = '{{ filter.show }}';
            } else {
                document.getElementsByClassName('hide-show-button')[0].innerHTML = '{{ filter.hide }}';

                //This ensures that focus works correctly for screen readers in the filter box.
                var elements = document.getElementsByClassName('govuk-heading-m');
                elements[0].setAttribute("tabindex", "0");
                elements[1].setAttribute("tabindex", "0");
                elements[0].focus();
            }
        }

        // Concat href to maintain filter values when clearing single
        let tags = document.querySelectorAll('.moj-filter__tag');
        let currentQueryArray = window.location.search.split('&');

        const searchFiltersValue = localStorage.getItem('searchFiltersValue');
        localStorage.removeItem('searchFiltersValue');
        tags.forEach(element => {
            element.href = '/{{ url }}?artefactId=' + '{{ artefactId }}' + '&' + buildHref(element.href, currentQueryArray);
        })

        function buildHref(elementHref, currentQueryArray) {
            const elementQueryString = elementHref.slice(elementHref.indexOf('?'), elementHref.length);
            const deleteVal = elementQueryString.split('=')[1];

            let currentFilterValues = currentQueryArray.find(item => item.startsWith('filterValues') || item.startsWith('?filterValues'))
            currentFilterValues = currentFilterValues.startsWith('?') ? currentFilterValues.substring(1) : currentFilterValues;

            // Need to remove the search box value from 'filterValues'
            if (searchFiltersValue) {
                const filterValuesPrefix = 'filterValues=' + searchFiltersValue + ',';
                if (currentFilterValues.startsWith(filterValuesPrefix)) {
                    currentFilterValues = currentFilterValues.replace(filterValuesPrefix, 'filterValues=');
                }
            }

            let href = currentFilterValues ? currentFilterValues.replace(deleteVal, '') + elementQueryString.replace('?', '&') : elementQueryString;
            return href.replace(',,', ',');
        }

        document.getElementsByClassName('hide-show-button')[0].addEventListener("click", toggleFilters);
    </script>
{% endmacro %}
